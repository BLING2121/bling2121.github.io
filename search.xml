<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Linux的一些shell命令]]></title>
    <url>%2F2019%2F09%2F22%2FLinux%E7%9A%84%E4%B8%80%E4%BA%9Bshell%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[记录linux中的一些shell命令查看当前绝对路径 1pwd 查看某个目录下的文件属性 12ls常用选项：-l、-a 查看文件内容 12345headtaillessmorecat 输入 1echo 重定向 12&gt; 或 &gt;&gt;&lt; 或 &lt;&lt; 管道 1| 查找指定内容，可以配合管道使用 12grepfind 查看进程 12pstop]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>shell命令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[面向对象编程]]></title>
    <url>%2F2019%2F08%2F15%2F%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[面向对象编程什么是面向对象编程 面向对象编程就是以个体作为编程的主要思路，符合我们人的思维。比如倒一杯水，我们说的是：我用保温杯去饮水机倒一杯水。这里的我、保温杯、饮水机就是个体，也就是对象。在以面向对象的思想编程时，要分析要解决的问题，从中找到所有对象，在搭建整个程序框架的时候，就直接以各个对象之间的相互行为进行编程。 怎么进行面向对象编程 面向对象编程其实很简单，因为我们人类的思维就是面向对象的。以倒水来举例。 第一步，搭建框架 要解决的是“我用保温杯去饮水机到一杯水”这个问题，找到其中的对象：我、保温杯、饮水机。分析三个对象之间的行为：在这个程序中，我具有拿这个行为，保温杯具有接水这个行为，饮水机具有出水这个行为。 框架就是将保温杯传给拿这个接口，将保温杯的接水传给饮水机的出水。（具体怎么拿、怎么出水、怎么接水，这个不管，由各个对象自己决定。） 第二步，定义类 所谓类，其实就是具有相同属性和行为的对象的集合。在倒水这个例子中，可以定义三个类：倒水的人、水杯、出水源。 倒水的人 123456789class 倒水的人&#123;public: 倒水的人(std::string 人); int 拿(string something);private: std::string 人; std::string 拿的东西;&#125; 水杯 123456789class 水杯&#123;public: 水杯(std::string 水杯类型,int 杯中水量); int 接水();private: std::string 水杯类型; int 杯中的水量;&#125; 出水源 123456789class 出水源&#123;public: 出水源(std::string 水源类型,int 剩余水量); int 出水(bool 是否出水);private: std::string 水源类型 int 剩余水量;&#125; 实例化 上面三个就是三个类的定义，具体代码实现之后就可以进行实例化，也就是实例化成我、保温杯、饮水机，然后通过方法（行为）进行互动。 123倒水的人 人(我);水杯 杯子(保温杯,0);出水源 水源(饮水机,100); 实例化之后就可以相互互动了。 先写到这里，我的理解目前就这样。之后理解更深的话在继续写。]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>编程思想</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[烦]]></title>
    <url>%2F2019%2F08%2F15%2F%E7%83%A6%2F</url>
    <content type="text"><![CDATA[很烦2019年8月15日]]></content>
      <categories>
        <category>心情</category>
      </categories>
      <tags>
        <tag>烦</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[有点东西]]></title>
    <url>%2F2019%2F08%2F13%2F%E6%9C%89%E7%82%B9%E4%B8%9C%E8%A5%BF%2F</url>
    <content type="text"><![CDATA[拍的一些照片]]></content>
      <categories>
        <category>生活</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F08%2F10%2FHello-World%2F</url>
    <content type="text"><![CDATA[Welcome欢迎]]></content>
  </entry>
  <entry>
    <title><![CDATA[博客搭建过程]]></title>
    <url>%2F2019%2F08%2F10%2F%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[记录下我的博客搭建过程，以免忘记2019-8-10 环境配置-我的配置：-1. 系统 archlinux-2. Node.js、npm-3. github 过程安装Node.js和npm1$ sudo pacman -S nodejs npm 根据官网给的步骤进行安装12345$ npm install hexo-cli -g$ hexo init blog$ cd blog$ npm install$ hexo server 至此，进入localhost：4000就能看到hexo的建议教程博客了。 主题选择hexo官网给出了很多theme，我选择的是Next 12$ cd ~/blog/$ git clone https://github.com/theme-next/hexo-theme-next themes/next 然后修改blog目录下的配置文件_config.yml,在倒数第二段中有一个theme，如果是vim直接搜索theme，将其修改为next 1theme: next 保存退出后再次执行hexo server,主题应该会变成next 创建新的博客输入命令 12$ cd blog/$ hexo new "newfile" 别输入.md这个后缀，会自动生成这个后缀的 新的.md文件在source/_posts/目录下然后可以写博客了,写完保存后可以先在本地查看 1$ hexo server 确认没问题后可以部署到github上 部署到github上新建一个仓库放博客，注意仓库名的格式是：你的用户名.github.io,完成后先放着，在本地进行操作 安装hexo的git插件 1$ npm install hexo-deployer-git --save 修改_config.yml配置文件，最后一段 1234deploy: type: git repo: https://github.com/username/username.github.io.git branch: master 然后生成静态文件 1$ hexo generate 部署到github上 1$ hexo deploy 完成，进入博客地址：username.github.io 就可以看到博客了！注意：部署到github上后不是立刻就能更新的，可能要等十几秒，多刷新几次! 后续配置修改配置文件_config.yml第二段 1234567title: 网站的标题subtitle: 副标题description: 网站的描述keywords: 网站关键字author: 作者名字language: 语言，默认en 建议改成zh-CNtimezone: 时区设置，设置成Asia/Shanghai]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[first]]></title>
    <url>%2F2019%2F08%2F10%2Ffirst%2F</url>
    <content type="text"><![CDATA[我的第一篇博客,纪念一下2019-8-10]]></content>
      <categories>
        <category>创建日</category>
      </categories>
      <tags>
        <tag>创建日</tag>
      </tags>
  </entry>
</search>
